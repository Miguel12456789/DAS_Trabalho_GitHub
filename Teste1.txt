#include <stdio.h>
#include <string.h>

// Definição da estrutura para representar um livro
struct Livro {
    char titulo[100];
    char autor[100];
    char isbn[100];
    char genero[100];
};

// Definição da estrutura para representar um Utilizador
struct Utilizador {
    char nome[100];
    char id[100];
    char emprestimos[25][100]; // Array bidimensional para armazenar os empréstimos do Utilizador
};

// Definição da estrutura para representar a biblioteca
struct Biblioteca {
    Livro livros[15]; // Array de livros, com tamanho máximo de 15
    Utilizador utilizadores[25]; // Array de Utilizadores, com tamanho máximo de 25
    int numLivros = 0; // Variável para rastrear o número atual de livros na biblioteca
    int numUtilizadores = 0; // Variável para rastrear o número atual de Utilizadores na biblioteca
    char livros_file[100] = "livros.txt"; // Nome do arquivo para armazenar informações sobre os livros
    char utilizadores_file[100] = "utilizadores.txt"; // Nome do arquivo para armazenar informações sobre os Utilizadores
};

// Função para carregar Utilizadores a partir de um arquivo
void carregarUtilizadores(Biblioteca &biblioteca) {
    FILE *file = fopen(biblioteca.utilizadores_file, "r");
    if (file != NULL) {
        while (biblioteca.numUtilizadores < 25 && fscanf(file, "%s %s", biblioteca.utilizadores[biblioteca.numUtilizadores].nome, biblioteca.utilizadores[biblioteca.numUtilizadores].id) == 2) {
            for (int j = 0; j < 25; ++j) {
                biblioteca.utilizadores[biblioteca.numUtilizadores].emprestimos[j][0] = '\0';
            }
            biblioteca.numUtilizadores++;
        }
        fclose(file);
    }
}

// Função para adicionar um Utilizador
void adicionarUtilizador(Biblioteca &biblioteca, const Utilizador& utilizador) {
    if (biblioteca.numUtilizadores < 25) {
        strcpy(biblioteca.utilizadores[biblioteca.numUtilizadores].nome, utilizador.nome);
        strcpy(biblioteca.utilizadores[biblioteca.numUtilizadores].id, utilizador.id);
        for (int j = 0; j < 25; ++j) {
            biblioteca.utilizadores[biblioteca.numUtilizadores].emprestimos[j][0] = '\0'; // Inicialize com uma string vazia
        }
        biblioteca.numUtilizadores++;
        FILE *file = fopen(biblioteca.utilizadores_file, "a");
        if (file != NULL) {
            fprintf(file, "%s %s\n", utilizador.nome, utilizador.id);
            fclose(file);
        }
    } else {
        printf("Número máximo de Utilizadores atingido!\n");
    }
}

// Função para carregar Livros a partir de um arquivo
void carregarLivros(Biblioteca &biblioteca) {
    FILE *file = fopen(biblioteca.livros_file, "r");
    if (file != NULL) {
        while (biblioteca.numLivros < 15 && fscanf(file, "%s %s %s %s", biblioteca.livros[biblioteca.numLivros].titulo, biblioteca.livros[biblioteca.numLivros].autor, biblioteca.livros[biblioteca.numLivros].isbn, biblioteca.livros[biblioteca.numLivros].genero) == 4) {
            biblioteca.numLivros++;
        }
        fclose(file);
    }
}

// Função para adicionar um Livro
void adicionarLivro(Biblioteca &biblioteca, const Livro& livro) {
    if (biblioteca.numLivros < 15) {
        strcpy(biblioteca.livros[biblioteca.numLivros].titulo, livro.titulo);
        strcpy(biblioteca.livros[biblioteca.numLivros].autor, livro.autor);
        strcpy(biblioteca.livros[biblioteca.numLivros].isbn, livro.isbn);
        strcpy(biblioteca.livros[biblioteca.numLivros].genero, livro.genero);
        biblioteca.numLivros++;

        FILE *file = fopen(biblioteca.livros_file, "a");
        if (file != NULL) {
            fprintf(file, "%s %s %s %s\n", livro.titulo, livro.autor, livro.isbn, livro.genero);
            fclose(file);
        }

        printf("\nLista de Livros:\n");
        for (int i = 0; i < biblioteca.numLivros; ++i) {
            printf("%s | %s | %s | %s\n", biblioteca.livros[i].titulo, biblioteca.livros[i].autor, biblioteca.livros[i].isbn, biblioteca.livros[i].genero);
        }
    } else {
        printf("Número máximo de livros atingido!\n");
    }
}

// Função para emprestar um Livro a um Utilizador
void emprestarLivro(Biblioteca &biblioteca, const char* utilizador_id, const char* isbn) {
    for (int i = 0; i < biblioteca.numUtilizadores; ++i) {
        if (strcmp(biblioteca.utilizadores[i].id, utilizador_id) == 0) {
            if (strcmp(biblioteca.utilizadores[i].emprestimos[24], "") == 0) {
                for (int j = 0; j < 25; ++j) {
                    if (strcmp(biblioteca.utilizadores[i].emprestimos[j], "") == 0) {
                        strcpy(biblioteca.utilizadores[i].emprestimos[j], isbn);
                        FILE *file = fopen(biblioteca.utilizadores_file, "w");
                        if (file != NULL) {
                            for (int k = 0; k < biblioteca.numUtilizadores; ++k) {
                                fprintf(file, "%s %s\n", biblioteca.utilizadores[k].nome, biblioteca.utilizadores[k].id);
                            }
                            fclose(file);
                        }
                        return;
                    }
                }
            } else {
                printf("Este Utilizador atingiu o limite de empréstimos!\n");
                return;
            }
        }
    }
    printf("Utilizador não encontrado!\n");
}

// Função para devolver um Livro à biblioteca
void devolverLivro(Biblioteca &biblioteca, const char* utilizador_id, const char* isbn) {
    for (int i = 0; i < biblioteca.numUtilizadores; ++i) {
        if (strcmp(biblioteca.utilizadores[i].id, utilizador_id) == 0) {
            for (int j = 0; j < 25; ++j) {
                if (strcmp(biblioteca.utilizadores[i].emprestimos[j], isbn) == 0) {
                    strcpy(biblioteca.utilizadores[i].emprestimos[j], "");
                    FILE *file = fopen(biblioteca.utilizadores_file, "w");
                    if (file != NULL) {
                        for (int k = 0; k < biblioteca.numUtilizadores; ++k) {
                            fprintf(file, "%s %s\n", biblioteca.utilizadores[k].nome, biblioteca.utilizadores[k].id);
                        }
                        fclose(file);
                    }
                    return;
                }
            }
            printf("Este Utilizador não tem este livro emprestado!\n");
            return;
        }
    }
    printf("Utilizador não encontrado!\n");
}
// Função para exibir todos os livros da biblioteca
void exibirLivros(Biblioteca &biblioteca) {
    printf("\nLista de Livros:\n");
    for (int i = 0; i < biblioteca.numLivros; ++i) {
        printf("Título: %s\nAutor: %s\nISBN: %s\nGênero: %s\n\n", biblioteca.livros[i].titulo, biblioteca.livros[i].autor, biblioteca.livros[i].isbn, biblioteca.livros[i].genero);
    }
}

// Função para pesquisar um livro por nome
void pesquisarLivroPorNome(Biblioteca &biblioteca, const char* nomeLivro) {
    bool encontrado = false;
    printf("\nLivros com o nome '%s':\n", nomeLivro);
    for (int i = 0; i < biblioteca.numLivros; ++i) {
        if (strstr(biblioteca.livros[i].titulo, nomeLivro) != NULL) {
            printf("Título: %s\nAutor: %s\nISBN: %s\nGênero: %s\n\n", biblioteca.livros[i].titulo, biblioteca.livros[i].autor, biblioteca.livros[i].isbn, biblioteca.livros[i].genero);
            encontrado = true;
        }
    }
    if (!encontrado) {
        printf("Nenhum livro encontrado com o nome '%s'.\n", nomeLivro);
    }
}

// Função para visualizar todos os livros da biblioteca
void visualizarTodosLivros(Biblioteca &biblioteca) {
    printf("\nLista de Todos os Livros:\n");
    for (int i = 0; i < biblioteca.numLivros; ++i) {
        printf("Título: %s\nAutor: %s\nISBN: %s\nGênero: %s\n\n", biblioteca.livros[i].titulo, biblioteca.livros[i].autor, biblioteca.livros[i].isbn, biblioteca.livros[i].genero);
    }
}

// Função para exibir o menu e processar as opções
void exibirMenu(Biblioteca &biblioteca) {
    int opcao;
    char utilizadorID[100], livroISBN[100], nomeLivro[100];

    do {
        printf("\n========== MENU PRINCIPAL ==========\n");
        printf("1. Adicionar Livro\n");
        printf("2. Adicionar Utilizador\n");
        printf("3. Emprestar Livro\n");
        printf("4. Devolver Livro\n");
        printf("5. Pesquisar Livro por Nome\n");
        printf("6. Visualizar Todos os Livros\n");
        printf("7. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                Livro novoLivro;
                printf("\nDigite o título do livro: ");
                scanf("%s", novoLivro.titulo);
                printf("Digite o autor do livro: ");
                scanf("%s", novoLivro.autor);
                printf("Digite o ISBN do livro: ");
                scanf("%s", novoLivro.isbn);
                printf("Digite o gênero do livro: ");
                scanf("%s", novoLivro.genero);
                adicionarLivro(biblioteca, novoLivro);
                break;
            }
            case 2: {
                Utilizador novoUtilizador;
                printf("\nDigite o nome do Utilizador: ");
                scanf("%s", novoUtilizador.nome);
                printf("Digite o ID do Utilizador: ");
                scanf("%s", novoUtilizador.id);
                adicionarUtilizador(biblioteca, novoUtilizador);
                break;
            }
            case 3: {
                printf("\nDigite o ID do Utilizador que deseja emprestar o livro: ");
                scanf("%s", utilizadorID);
                printf("Digite o ISBN do livro que deseja emprestar: ");
                scanf("%s", livroISBN);
                emprestarLivro(biblioteca, utilizadorID, livroISBN);
                break;
            }
            case 4: {
                printf("\nDigite o ID do Utilizador que deseja devolver o livro: ");
                scanf("%s", utilizadorID);
                printf("Digite o ISBN do livro que deseja devolver: ");
                scanf("%s", livroISBN);
                devolverLivro(biblioteca, utilizadorID, livroISBN);
                break;
            }
            case 5: {
                printf("\nDigite o nome do livro que deseja pesquisar: ");
                scanf("%s", nomeLivro);
                pesquisarLivroPorNome(biblioteca, nomeLivro);
                break;
            }
            case 6: {
                visualizarTodosLivros(biblioteca);
                break;
            }
            case 7: {
                printf("\nSaindo do programa...\n");
                break;
            }
            default: {
                printf("\nOpção inválida! Por favor, escolha uma opção válida.\n");
            break;
        }
    }
} while (opcao != 7);
}
int main() {
Biblioteca biblioteca;
// Carregar Utilizadores e Livros do arquivo ao iniciar o programa
carregarUtilizadores(biblioteca);
carregarLivros(biblioteca);

// Exibir o menu principal
exibirMenu(biblioteca);

return 0;
}
